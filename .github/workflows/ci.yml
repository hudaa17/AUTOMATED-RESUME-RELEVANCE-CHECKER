name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python -m spacy download en_core_web_sm
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test application imports
      run: |
        python -c "
        import sys
        import os
        sys.path.append('.')
        
        # Test core imports
        try:
            import streamlit as st
            import pandas as pd
            import numpy as np
            import sklearn
            import spacy
            import PyPDF2
            import docx2txt
            import sqlite3
            print('✅ All core dependencies imported successfully')
        except ImportError as e:
            print(f'❌ Import error: {e}')
            sys.exit(1)
        
        # Test spaCy model
        try:
            nlp = spacy.load('en_core_web_sm')
            print('✅ spaCy model loaded successfully')
        except OSError as e:
            print(f'❌ spaCy model error: {e}')
            sys.exit(1)
        "
    
    - name: Test database initialization
      run: |
        python -c "
        import sys
        import os
        sys.path.append('.')
        
        # Test database creation without running full app
        try:
            import sqlite3
            from pathlib import Path
            
            # Create test database
            test_db = 'test_resume_system.db'
            conn = sqlite3.connect(test_db)
            cursor = conn.cursor()
            
            # Test table creation
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS test_table (
                    id INTEGER PRIMARY KEY,
                    name TEXT NOT NULL
                )
            ''')
            
            cursor.execute('INSERT INTO test_table (name) VALUES (?)', ('test',))
            conn.commit()
            
            result = cursor.execute('SELECT * FROM test_table').fetchone()
            conn.close()
            
            # Cleanup
            Path(test_db).unlink()
            
            print('✅ Database operations successful')
        except Exception as e:
            print(f'❌ Database error: {e}')
            sys.exit(1)
        "
    
    - name: Test document processing
      run: |
        python -c "
        import sys
        sys.path.append('.')
        
        try:
            from io import BytesIO
            import PyPDF2
            import docx2txt
            
            # Test PDF processing (without actual PDF)
            print('✅ PDF processing libraries available')
            
            # Test DOCX processing (without actual DOCX)
            print('✅ DOCX processing libraries available')
            
        except Exception as e:
            print(f'❌ Document processing error: {e}')
            sys.exit(1)
        "

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install code quality tools
      run: |
        pip install black flake8 isort
    
    - name: Check code formatting with Black
      run: |
        black --check --diff .
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .
    
    - name: Lint with flake8
      run: |
        flake8 . --max-line-length=127 --extend-ignore=E203,W503

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install security scanning tools
      run: |
        pip install bandit safety
    
    - name: Run security scan with Bandit
      run: |
        bandit -r . -x ./venv,./resume_env
    
    - name: Check for known security vulnerabilities
      run: |
        pip install -r requirements.txt
        safety check
